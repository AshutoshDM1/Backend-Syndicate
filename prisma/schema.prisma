// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////// USER //////////////

enum UserType {
  ADMIN
  MANAGER
  ORDER_MANAGER
  KITCHEN_MANAGER
  CUSTOMER
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?   @unique
  role          UserType? @default(CUSTOMER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?

  // Relations
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]
  customer  Customer?  

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@map("verification")
}

////////////// CUSTOMER //////////////
enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
}

model Customer {
  id                    String            @id @default(uuid())
  userId                String            @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Payment
  preferredPaymentMethod PaymentMethod?   @default(CASH)
  
  // Customer Status
  isActive              Boolean           @default(true)
  isVip                 Boolean           @default(false)
  customerSince         DateTime          @default(now())
  lastOrderDate         DateTime?
  totalOrdersCount      Int               @default(0)
  totalSpent            Decimal           @default(0) @db.Decimal(10, 2)
  
  // Marketing Preferences
  emailNotifications    Boolean           @default(true)
  smsNotifications      Boolean           @default(true)
  pushNotifications     Boolean           @default(true)

  // Preferences : TODO
  // dietaryPreferences    DietaryPreference[]
  // allergies             String[]
  // preferredCuisine     String[]
  
  // Delivery Information : TODO
  //   defaultAddressIndex   Int
  //   address               Address[]
  //   deliveryInstructions  String?
  
  
  // Relations
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  //   loyaltyAccount        LoyaltyAccount?
  //   orders                Order[]
  //   feedback              Feedback[]
  //   customerTags          CustomerTag[]
  @@map("customers")
}