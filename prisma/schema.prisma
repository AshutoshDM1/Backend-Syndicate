// This file is auto-generated from partials. Do not edit directly.
// Run "npm run build:schema" to regenerate this file.

// Base configuration and global enums

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// GLOBAL ENUMS
// =============================================================================

enum UserType {
  ADMIN
  MANAGER
  ORDER_MANAGER
  KITCHEN_MANAGER
  CUSTOMER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  ORDERING
  NEEDS_CLEANING
}

enum TableSize {
  SMALL
  MEDIUM
  LARGE
}

enum OrderStatus {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ModifierType {
  EXTRA
  OPTION
} 

// =============================================================================
// USER MANAGEMENT DOMAIN
// =============================================================================

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?   @unique
  role          UserType? @default(CUSTOMER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?

  // Relations
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]
  customer      Customer?  

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@map("verification")
} 

// =============================================================================
// CUSTOMER DOMAIN
// =============================================================================

model Customer {
  id                    String            @id @default(uuid())
  userId                String            @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Payment
  preferredPaymentMethod PaymentMethod?   @default(CASH)
  
  // Customer Status
  isActive              Boolean           @default(true)
  isVip                 Boolean           @default(false)
  customerSince         DateTime          @default(now())
  lastOrderDate         DateTime?
  totalOrdersCount      Int               @default(0)
  totalSpent            Decimal           @default(0) @db.Decimal(10, 2)
  
  // Marketing Preferences
  emailNotifications    Boolean           @default(true)
  smsNotifications      Boolean           @default(true)
  pushNotifications     Boolean           @default(true)

  // Preferences : TODO
  // dietaryPreferences    DietaryPreference[]
  // allergies             String[]
  // preferredCuisine     String[]
  
  // Delivery Information : TODO
  //   defaultAddressIndex   Int
  //   address               Address[]
  //   deliveryInstructions  String?
  
  // Relations
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  //   loyaltyAccount        LoyaltyAccount?
  //   orders                Order[]
  //   feedback              Feedback[]
  //   customerTags          CustomerTag[]
  
  @@map("customers")
} 

// =============================================================================
// TABLE MANAGEMENT DOMAIN
// =============================================================================

model Table {
  id             String      @id @default(uuid())
  number         String      // e.g., "A1", "B2"
  status         TableStatus @default(AVAILABLE)
  size           TableSize
  orderStartTime DateTime?
  orderId        String?
  floor          Int
  customerCount  Int?
  totalAmount    Float?
  orderItems     Int?

  // Relations
  orders Order[]
  
  @@map("table")
}

// =============================================================================
// ORDER MANAGEMENT DOMAIN
// =============================================================================

model Order { 
  id             String      @id @default(uuid())
  tableId        String
  customerName   String
  customerPhone  Int?
  orderTime      DateTime    @default(now())
  totalAmount    Decimal     @default(0)
  status         OrderStatus @default(STARTED)
  paymentMethod  PaymentMethod

  // Relations
  table      Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  
  @@map("order")
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  menuItemId  String?
  comboMealId String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  notes       String?

  // Relations
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem    MenuItem? @relation(fields: [menuItemId], references: [id])
  comboMeal   ComboMeal? @relation(fields: [comboMealId], references: [id])
  modifiers   OrderItemModifier[]

  @@map("order_item")
}

model OrderItemModifier {
  orderItemId String
  modifierId  String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)

  // Relations
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifier    Modifier  @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@id([orderItemId, modifierId])
  @@map("order_item_modifier")
} 

// =============================================================================
// MENU MANAGEMENT DOMAIN
// =============================================================================

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  menuItems   MenuItem[]
  
  @@map("category")
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  categoryId  String
  isAvailable Boolean  @default(true)
  rating      Decimal? @default(0) @db.Decimal(2, 1)
  prepTime    Int?     // Preparation time in minutes
  calories    Int?
  isVegetarian Boolean @default(false)
  isVegan     Boolean @default(false)
  isGlutenFree Boolean @default(false)
  isSpicy     Boolean @default(false)
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modifiers   MenuItemModifier[]
  orderItems  OrderItem[]
  comboItems  ComboMealItem[]
  
  @@map("menu_item")
}

model Modifier {
  id          String       @id @default(uuid())
  name        String
  price       Decimal      @default(0) @db.Decimal(10, 2)
  type        ModifierType
  description String?
  isAvailable Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  menuItems   MenuItemModifier[]
  orderItemModifiers OrderItemModifier[]
  
  @@map("modifier")
}

model MenuItemModifier {
  menuItemId String
  modifierId String
  isRequired Boolean @default(false)
  sortOrder  Int     @default(0)

  // Relations
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  modifier   Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@id([menuItemId, modifierId])
  @@map("menu_item_modifier")
}

model ComboMeal {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       ComboMealItem[]
  orderItems  OrderItem[]
  
  @@map("combo_meal")
}

model ComboMealItem {
  comboMealId String
  menuItemId  String
  quantity    Int @default(1)

  // Relations
  comboMeal   ComboMeal @relation(fields: [comboMealId], references: [id], onDelete: Cascade)
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@id([comboMealId, menuItemId])
  @@map("combo_meal_item")
} 